name: Release PHP Package

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  COMPOSER_ARGS: "--no-interaction --no-progress --ansi"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php: ["8.1", "8.2", "8.3", "8.4"]

    name: PHP ${{ matrix.php }} Tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: json, mbstring, zip
          tools: composer

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install ${{ env.COMPOSER_ARGS }}

      - name: Run PHPStan
        run: vendor/bin/phpstan analyse --no-progress

      - name: Run PHP CodeSniffer
        run: vendor/bin/phpcs

      - name: Run PHPUnit tests
        run: vendor/bin/phpunit

  release:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          extensions: json, mbstring, zip
          tools: composer

      - name: Install dependencies
        run: composer install ${{ env.COMPOSER_ARGS }} --no-dev

      - name: Check if version changed
        id: version-check
        run: |
          # Get current version from composer.json
          CURRENT_VERSION=$(php -r "echo json_decode(file_get_contents('composer.json'))->version ?? 'unknown';")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # Check if this version already has a git tag
          if git tag -l "v$CURRENT_VERSION" | grep -q "v$CURRENT_VERSION"; then
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "Version $CURRENT_VERSION already released"
          else
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "New version $CURRENT_VERSION ready for release"
          fi

      - name: Create GitHub Release
        if: steps.version-check.outputs.should_release == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version-check.outputs.current_version }}
          name: v${{ steps.version-check.outputs.current_version }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to Packagist
        if: steps.version-check.outputs.should_release == 'true'
        run: |
          echo "Package will be automatically published to Packagist when the GitHub release is created"
          echo "Make sure your package is registered at https://packagist.org and has the GitHub webhook configured"

  package-test:
    needs: release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for Packagist
        run: |
          echo "Waiting 30 seconds for Packagist to update..."
          sleep 30

      - name: Test deployed package
        env:
          LOGDASH_API_KEY: ${{ secrets.LOGDASH_API_KEY }}
        run: |
          cd check-deployed-package
          chmod +x run.sh
          ./run.sh
